name: 'Build RPi Image with Release Download'
description: 'Downloads latest release from a repo and builds a Raspberry Pi image'
inputs:
  source_repo:
    description: 'GitHub repository to download release from (e.g., owner/repo)'
    required: true
  version_prefix:
    description: 'Version tag prefix to match releases (e.g., vapp-)'
    required: true
  github_token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  service_name:
    description: 'Name of the service to create'
    required: false
    default: 'myapp'
  esbuild_server_url:
    description: 'URL of esbuild development server (enables esbuild mode when provided)'
    required: false
  chroot_commands:
    description: 'Additional commands to run in chroot environment (multiline string)'
    required: false
    default: ''
  service_command:
    description: 'Command to run for the service (e.g., "/usr/bin/node /home/pi/code/artifacts/dist/server/dist/local-server.cjs")'
    required: false
    default: '/usr/bin/node /home/pi/code/artifacts/dist/server/dist/local-server.cjs'

runs:
  using: 'composite'
  steps:

    - name: Free up disk space
      uses: insightsengineering/disk-space-reclaimer@v1
      with:
        android: true
        dotnet: true
        haskell: true
        large-packages: false
        swap-storage: true
        docker-images: true
        tools-cache: false

    - name: Check disk space
      shell: bash
      run: df -h

    - name: Update apt
      shell: bash
      run: sudo apt-get update

    - name: Install Dependencies
      shell: bash
      run: sudo apt install coreutils p7zip-full qemu-user-static python3-git

    - name: Find latest matching release by tag prefix
      id: find_release
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        PREFIX="${{ inputs.version_prefix }}"
        latest=$(gh release list --repo "${{ inputs.source_repo }}" --limit 100 --json tagName,publishedAt \
          | jq -r --arg prefix "$PREFIX" '
              map(select(.tagName | startswith($prefix)))
              | sort_by(.publishedAt)
              | last
              | if . == null then "none" else .tagName[1:] end
            ')
        echo "latest_tag=$latest" >> $GITHUB_OUTPUT
        echo "Found latest release: $latest"

    - name: Download artifact from latest release
      if: steps.find_release.outputs.latest_tag != 'none'
      uses: blauqs/actions-download-asset@master
      with:
        repo: ${{ inputs.source_repo }}
        version: ${{ steps.find_release.outputs.latest_tag }}
        file: dist.zip
        out: previous_release.zip
        token: ${{ inputs.github_token }}

    - name: Checkout CustomPiOS
      uses: actions/checkout@v2
      with:
        repository: 'guysoft/CustomPiOS'
        path: CustomPiOS

    - name: Checkout Project Repository
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository }}
        path: repository_temp
        submodules: true

    - name: Move FullPageOS folder
      shell: bash
      run: |
        mv repository_temp/FullPageOS repository

    - name: Place downloaded release zip
      if: steps.find_release.outputs.latest_tag != 'none'
      shell: bash
      run: |
        # Create the directory structure where updatecli expects the zip file on the RPi
        mkdir -p repository/src/modules/rpi-deploy/filesystem/home/pi/code/artifacts/
        # Move the downloaded zip to where the updatecli scripts expect it
        mv previous_release.zip repository/src/modules/rpi-deploy/filesystem/home/pi/code/artifacts/dist.zip
        echo "Placed release zip at: repository/src/modules/rpi-deploy/filesystem/home/pi/code/artifacts/dist.zip"

    - name: Parameterize UpdateCLI configuration
      shell: bash
      run: |
        # Extract owner and repository from source_repo input
        OWNER=$(echo "${{ inputs.source_repo }}" | cut -d'/' -f1)
        REPOSITORY=$(echo "${{ inputs.source_repo }}" | cut -d'/' -f2)

        # Create the directory for secrets
        mkdir -p repository/src/modules/rpi-deploy/filesystem/home/pi/code/

        # Create secrets.env file with GITHUB_TOKEN and SERVICE_NAME
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" > repository/src/modules/rpi-deploy/filesystem/home/pi/code/secrets.env
        echo "SERVICE_NAME=${{ inputs.service_name }}" >> repository/src/modules/rpi-deploy/filesystem/home/pi/code/secrets.env

        # Parameterize the updatecli configuration file
        UPDATECLI_CONFIG="repository/src/modules/rpi-deploy/filesystem/home/pi/code/updatecli_github_commit.yml"

        # Replace template variables using envsubst
        export GITHUB_OWNER="$OWNER"
        export GITHUB_REPOSITORY="$REPOSITORY"
        export GITHUB_VERSION_PREFIX="${{ inputs.version_prefix }}"
        export GITHUB_TAG_PREFIX="${GITHUB_VERSION_PREFIX}"

        # Process the template file
        envsubst '$GITHUB_OWNER $GITHUB_REPOSITORY $GITHUB_TAG_PREFIX' < "$UPDATECLI_CONFIG" > "$UPDATECLI_CONFIG.tmp"
        mv "$UPDATECLI_CONFIG.tmp" "$UPDATECLI_CONFIG"

        # Export additional template variables
        export CHROOT_COMMANDS="${{ inputs.chroot_commands }}"
        export SERVICE_COMMAND="${{ inputs.service_command }}"

        # Process start_chroot_script template
        CHROOT_SCRIPT="repository/src/modules/rpi-deploy/start_chroot_script"
        envsubst '$CHROOT_COMMANDS' < "$CHROOT_SCRIPT" > "$CHROOT_SCRIPT.tmp"
        mv "$CHROOT_SCRIPT.tmp" "$CHROOT_SCRIPT"

        # Process run_from_github_release.sh template
        RELEASE_SCRIPT="repository/src/modules/rpi-deploy/filesystem/home/pi/code/scripts/run_from_github_release.sh"
        envsubst '$SERVICE_COMMAND' < "$RELEASE_SCRIPT" > "$RELEASE_SCRIPT.tmp"
        mv "$RELEASE_SCRIPT.tmp" "$RELEASE_SCRIPT"

        # Configure esbuild if server URL is provided
        if [ -n "${{ inputs.esbuild_server_url }}" ]; then
          echo "ESBUILD_SERVER_URL=${{ inputs.esbuild_server_url }}" >> repository/src/modules/rpi-deploy/filesystem/home/pi/code/esbuild.env
          echo "SERVICE_NAME=${{ inputs.service_name }}-dev" >> repository/src/modules/rpi-deploy/filesystem/home/pi/code/esbuild.env

          # Enable esbuild service in start_chroot_script
          sed -i 's/# systemctl enable check_esbuild.service/systemctl enable check_esbuild.service/' repository/src/modules/rpi-deploy/start_chroot_script

          echo "Esbuild mode enabled:"
          echo "  Server URL: ${{ inputs.esbuild_server_url }}"
          echo "  Service name: ${{ inputs.service_name }}-dev"
        fi

        echo "Updated UpdateCLI config with:"
        echo "  Owner: $OWNER"
        echo "  Repository: $REPOSITORY"
        echo "  Version prefix: ${{ inputs.version_prefix }}"
        echo "  Service name: ${{ inputs.service_name }}"
        if [ -n "${{ inputs.esbuild_server_url }}" ]; then
          echo "  Esbuild mode: enabled"
        else
          echo "  Esbuild mode: disabled (GitHub releases only)"
        fi

    - name: Download Raspbian Image
      shell: bash
      run: cd repository/src/image && wget -q -c --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_armhf_latest'

    - name: Update CustomPiOS Paths
      shell: bash
      run: cd repository/src && ../../CustomPiOS/src/update-custompios-paths

    - name: Build Image
      shell: bash
      run: sudo modprobe loop && cd repository/src && sudo BASE_ARCH=armhf bash -x ./build_dist

    - name: Copy Output
      shell: bash
      run: cp ${{ github.workspace }}/repository/src/workspace/*-raspios-*-lite.img build.img

    - name: Zip Output
      shell: bash
      run: gzip build.img

    - name: Set artifact name
      id: artifact
      shell: bash
      run: echo "name=$(date '+%Y%m%d_%H%M%S')_${{ github.sha }}_$(echo '${{ inputs.source_repo }}' | tr '/' '_')_rpi.img.gz" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact.outputs.name }}
        path: build.img.gz
