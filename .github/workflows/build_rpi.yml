name: Build Raspberry Pi Image

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 21
        cache: 'npm'
    - name: Install modules
      run: npm i
    - name: Build app
      run: npm run build

    - name: Prepare Customization Scripts
      run: |
        mkdir -p customizations/stage-custom

        # 00-run.sh: Main script to execute customizations
        cat << 'EOF' > customizations/stage-custom/00-run.sh
        #!/bin/bash
        set -e

        # Run Wi-Fi configuration
        /pi-gen/stage-custom/01-wifi-config

        # Set up HTTP server
        /pi-gen/stage-custom/02-http-server
        EOF

        chmod +x customizations/stage-custom/00-run.sh

        # 01-wifi-config: Configure Wi-Fi credentials
        cat << 'EOF' > customizations/stage-custom/01-wifi-config
        #!/bin/bash
        set -e
        mkdir -p "${ROOTFS_DIR}/etc/wpa_supplicant"

        cat << WIFI_EOF > "${ROOTFS_DIR}/etc/wpa_supplicant/wpa_supplicant.conf"
        country=US
        ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
        update_config=1

        network={
            ssid="Your_SSID"
            psk="Your_Password"
        }
        WIFI_EOF

        chmod 600 "${ROOTFS_DIR}/etc/wpa_supplicant/wpa_supplicant.conf"
        EOF

        chmod +x customizations/stage-custom/01-wifi-config

        # 02-http-server: Set up systemd service for HTTP server
        cat << 'EOF' > customizations/stage-custom/02-http-server
        #!/bin/bash
        set -e

        # Install Python3 using chroot
        chroot "${ROOTFS_DIR}" bash << CHROOT_EOF
        apt-get update
        apt-get install -y python3
        CHROOT_EOF

        # Create HTTP server script
        cat << SERVER_EOF > "${ROOTFS_DIR}/usr/local/bin/simple-http-server.py"
        #!/usr/bin/env python3
        from http.server import BaseHTTPRequestHandler, HTTPServer

        class SimpleHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Hello from Raspberry Pi!')

        if __name__ == '__main__':
            server = HTTPServer(('0.0.0.0', 8080), SimpleHandler)
            print('Starting server at http://0.0.0.0:8080')
            server.serve_forever()
        SERVER_EOF

        chmod +x "${ROOTFS_DIR}/usr/local/bin/simple-http-server.py"

        # Create and enable the systemd service
        cat << SERVICE_EOF > "${ROOTFS_DIR}/etc/systemd/system/simple-http-server.service"
        [Unit]
        Description=Simple HTTP Server
        After=network.target

        [Service]
        ExecStart=/usr/local/bin/simple-http-server.py
        Restart=always
        User=pi

        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF

        chroot "${ROOTFS_DIR}" bash << CHROOT_EOF
        systemctl enable simple-http-server.service
        CHROOT_EOF
        EOF

        chmod +x customizations/stage-custom/02-http-server

        # Create the pi-gen config file
        cat << CONFIG_EOF > customizations/config
        IMG_NAME='CustomPiImage'
        ENABLE_SSH=1
        CONFIG_EOF

    # Set up Docker Buildx (needed for multi-arch builds)
    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Build the custom Raspberry Pi image using pi-gen
    - name: Build Custom Raspberry Pi Image
      uses: usimd/pi-gen-action@v1
      with:
        image-name: 'CustomPiImage'
        stage-list: 'stage0 stage1 stage2 stage-custom'
        config: './customizations/config'
        custom-stages: './customizations/stage-custom'
        export-last-stage-only: true

    # Upload the final image artifact
    - name: Upload Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: custom-raspberry-pi-image
        path: deploy/CustomPiImage.img
